#Q1
str = input()
x = 0
while str and x!=-1:
  x=str.find("bot")
  str=str[:x] + str[x+3: ]
if str=="":
  print("Yes/true")
else:
  print("No/false")


_______________________________________________________________________________________________-
#Q4
def rev(num):
  rev_num = 0
  while(num>0):
    a = num%10
    rev_num = rev_num*10 + a
    num = num // 10
  return rev_num


N = int(input("please provide the no. of entries"))

arr = []
arr1= []
for i in range(0,2*N):
  l = int(input("enter values"))
  arr.append(l)

for i in range(0,2*N):
  l = rev(arr[i])
  arr1.append(l)

for i in range(0,2*N-1,2):
  l = arr1[i] + arr1[i+1]
  x = rev(l)
  print(x)
  
_______________________________________________________________________-  
  
#Q2 using the logic that the square root of the odd composite number - a prime whole divided by 2 should be a perfect number
import math
#check weather the number is prime
def is_prime(n):
    if n % 2 == 0:
        return False
    else:
        for i in range(3, int(n**0.5+1),2):
            if n % i == 0:
                return False
        return True
n = 3
primes = []
x =2
primes.append(x)
arr = []

while(n < 7000):
    if is_prime(n):
        primes.append(n)
    else:
        for i in primes:
            if math.sqrt(((n-i)/2)) == int(math.sqrt(((n-i)/2))):
              arr.append((n,i,int(math.sqrt(((n-i)/2)))))
              break
        else:
            print(n)
            break

    n += 2
print(arr)



_________________________________________________________________________________________________
#Q3 simple logic of palindrome sequences

from string import ascii_lowercase as abcd
n=int(input())
str=input()
str1=[i for i in str.split()]

a=97
x = 0
y=True
for x in range(n//2):
    if str1[x]==str1[n-x-1]:
         pass
    else:
        print("false")
        y=False
        break
if y:
    for x in range (n//2-1):
        if str1[x+1]==str1[x] or str1[x+1]==chr(ord(str1[x])+1):
            pass
        else:
            print ("false")
            y=False

if y:
    print("true")
  
